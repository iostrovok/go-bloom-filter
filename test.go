package main

import (
	"fmt"
	"os"

	"github.com/iostrovok/go-bloom-filter/bloomfilter"
)

func main() {

	a := []string{
		"890", "3920", "4026", "9193", "3605", "2457", "5026", "2468", "1179", "1971", "5233", "5488", "4383", "6175", "9761", "9345", "1842", "2633", "647", "1270",
		"8505", "6063", "4124", "82", "8532", "3844", "1506", "7851", "532", "9893", "6475", "916", "9510", "355", "7799", "264", "710", "9273", "2925", "6438", "8313",
		"1260", "7522", "5211", "2316", "7834", "5451", "9249", "9618", "350", "3439", "3373", "8841", "9602", "1625", "3754", "5161", "3582", "2503", "5136", "3909",
		"6489", "622", "1890", "2417", "4464", "8730", "3968", "770", "9947", "17", "6410", "2071", "876", "4619", "3654", "8938", "5524", "1398", "3295", "409", "3513",
		"281", "3831", "7831", "4084", "5400", "43", "1371", "4632", "9031", "3338", "1840", "7289", "9157", "445", "2147", "8137", "8739", "9377", "7003", "4658", "966",
		"4411", "9995", "6511", "7634", "5381", "1350", "288", "9450", "1758", "902", "1186", "24", "5397", "1134", "9223", "3121", "4886", "3327", "1103", "6068", "3421",
		"4006", "5577", "2196", "3867", "7335", "4767", "8368", "8960", "6616", "9913", "5436", "8386", "2399", "4448", "9395", "4066", "4399", "4356", "301", "4742",
		"1807", "7921", "7045", "6444", "1826", "9220", "9623", "5879", "4286", "6999", "9478", "8948", "2687", "9957", "7054", "8222", "6505", "7226", "7539", "9261",
		"1483", "7335", "8188", "76", "8024", "8256", "7973", "5574", "9957", "535", "5286", "946", "7867", "6398", "3920", "7239", "5979", "8595", "7423", "7014", "1420",
		"179", "6426", "9903", "8228", "5512", "3853", "6023", "8587", "9331", "9327", "8110", "6115", "5995", "9210", "7218", "7537", "4783", "1734", "4957", "9543", "8906",
		"6267", "4124", "7013", "3069", "4714", "7587", "8976", "4092", "2787", "9852", "9918", "3295", "2242", "1650", "6285", "5239", "6589", "9632", "1479", "4365",
		"2275", "6084", "3338", "7243", "4068", "741", "859", "2458", "420", "9420", "4643", "1919", "5413", "5595", "2988", "5676", "8232", "1755", "3361", "8203", "1750",
		"6744", "2883", "2868", "9919", "8735", "1947", "8930", "9234", "9781", "4033", "2811", "8", "9714", "8870", "5001", "8257", "427", "176", "4993", "3770", "499",
		"4128", "8273", "4119", "396", "6207", "4631", "6150", "9421", "4315", "2458", "7677", "5482", "1291", "3319", "5471", "7118", "5296", "1363", "6372", "2262", "6805",
		"7652", "6992", "1499", "843", "3790", "3661", "7553", "751", "6568", "5194", "979", "1385", "5470", "1404", "6286", "4948", "304", "8599", "2768", "3309", "9084",
		"4217", "8952", "7544", "6138", "6808", "985", "9342", "9013", "2493", "8564", "5385", "4197", "1087", "6309", "2435", "4153", "9470", "1124", "1821", "6785", "2630",
		"6391", "8835", "7784", "5612", "8033", "323", "5552", "9541", "9301", "3941", "872", "6075", "9586", "707", "2594", "8175", "5670", "1280", "7018", "9169", "9955",
		"1431", "9841", "9351", "7894", "6657", "4374", "7934", "3444", "8315", "280", "3507", "2187", "510", "8609", "1514", "9320", "2518", "579", "5913", "3883", "2044",
		"7966", "1412", "3528", "8685", "1671", "4120", "1974", "1125", "9487", "9500", "5002", "8136", "4081", "7672", "5749", "2999", "2112", "4824", "147", "5068", "7481",
		"299", "6031", "4769", "2983", "337", "5695", "1772", "9276", "723", "9352", "2210", "3442", "2479", "3622", "6203", "4524", "158", "1392", "339", "1876", "1141",
		"4476", "8069", "3526", "193", "4109", "2558", "7124", "4440", "4469", "6480", "7321", "8379", "5409", "5004", "2324", "2139", "6828", "8362", "6625", "68", "1376",
		"748", "5980", "7170", "3830", "1750", "1619", "4786", "1081", "7530", "4827", "6602", "9884", "6358", "4289", "5439", "5264", "6752", "862", "5201", "764", "4620",
	}

	fs, err := bloomfilter.New(10000, 0.001)
	if err != nil {
		fmt.Printf("err: %s\n", err)
		os.Exit(0)
	}

	countBad := 0

	for _, s := range a {
		fs.Add([]byte(s))
	}

	for _, t := range [][]byte{[]byte("1eee2"), []byte("2eee3"), []byte("3eee4"), []byte("4e567fee5"), []byte("e4eee4")} {
		for _, s := range a {
			fs.Add(append([]byte(s), t...))
		}
	}

	for _, s := range a {
		if !fs.Check([]byte(s)) {
			countBad++
		}
	}
	fmt.Printf("countBad: %d\n", countBad)

	// fs.ToFile("./local_scal_go.bin")
}
